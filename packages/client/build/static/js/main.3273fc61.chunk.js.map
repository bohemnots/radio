{"version":3,"sources":["components/Footer.js","components/Header.js","hooks/useMeta.js","config/index.js","components/Edit.js","pages/EditPage.js","hooks/usePlayer.js","components/Player.js","pages/PlayerPage.js","App.js","serviceWorker.js","index.js"],"names":["rel","Footer","className","href","target","style","paddingTop","useMeta","React","useState","isLoading","setIsLoading","theme","customName","trackName","location","imgUrl","meta","setMeta","useEffect","id","setInterval","fetch","then","response","json","data","newMeta","sortObj","JSON","stringify","finally","clearInterval","obj","Object","keys","sort","reduce","newObj","key","EditPage","message","setMessage","onSubmit","e","preventDefault","newData","value","t1Color","t1Background","t2Color","t2Background","password","method","body","headers","status","Error","statusText","catch","err","htmlFor","type","name","defaultValue","backgroundColor","display","textAlign","audio","Audio","usePlayer","firstTime","setFirstTime","state","setState","play","useCallback","paused","window","focus","addEventListener","removeEventListener","pause","Player","props","isPlaying","toggle","actionIcon","t1","t2","alt","src","onClick","color","PlayerPage","App","art","setArt","document","getElementsByTagName","newUrl","backgroundImage","updateBackground","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3273fc61.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles/footer.css\";\n\nconst rel = \"noopener noreferrer\";\nconst target = \"_blank\";\n\nconst fb = \"https://www.facebook.com/bohemnotsradio/\";\nconst ig = \"https://www.instagram.com/bohemnotsradio/\";\nconst tw = \"https://twitter.com/bohemnotsradio\";\nconst sc = \"https://soundcloud.com/bohemnotsradio\";\n\nexport default function Footer() {\n  return (\n    <nav className=\"social-links\">\n      <ul>\n        <li>\n          <a href={fb} target={target} rel={rel}>\n            <i className=\"fa-lg fa fa-facebook\"></i>\n          </a>\n        </li>\n        <li>\n          <a href={ig} target={target} rel={rel}>\n            <i className=\"fa-lg fa fa-instagram\"></i>\n          </a>\n        </li>\n        <li>\n          <a href={tw} target={target} rel={rel}>\n            <i className=\"fa-lg fa fa-twitter\"></i>\n          </a>\n        </li>\n        <li>\n          <a href={sc} target={target} rel={rel}>\n            <i className=\"fa-lg fa fa-soundcloud\"></i>\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return <header style={{ paddingTop: \"10%\" }}></header>;\n}\n","import React from \"react\";\n\nimport { metadataUrl, metadataUpdateInterval } from \"../config\";\n\nexport default function useMeta() {\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const [meta, setMeta] = React.useState({\n    theme: \"dark\",\n    customName: '',\n    trackName: '',\n    location: '',\n    imgUrl: null\n  });\n\n  React.useEffect(() => {\n    const id = setInterval(() => {\n      if (isLoading) return;\n      fetch(metadataUrl)\n        .then(response => {\n          return response.json().then(data => {\n            const newMeta = sortObj(data);\n            if (JSON.stringify(newMeta) !== JSON.stringify(meta)) {\n              setMeta(newMeta);\n            }\n          });\n        })\n        .finally(() => setIsLoading(false));\n    }, metadataUpdateInterval);\n\n    return () => clearInterval(id);\n  }, [isLoading, meta]);\n\n  return meta;\n}\n\nconst sortObj = obj => {\n  return Object.keys(obj || {})\n    .sort()\n    .reduce((newObj, key) => {\n      newObj[key] = obj[key];\n      return newObj;\n    }, {});\n};\n","export const streamUrl = \"https://bhmnts.out.airtime.pro/bhmnts_a\";\n\nexport const metadataUrl = \"/metadata\";\n\nexport const metadataUpdateInterval = 1000;\n\nexport const defaultTheme = \"dark\";\n","import React from \"react\";\n\nimport useMeta from \"../hooks/useMeta\";\nimport { metadataUrl } from \"../config\";\n\nimport \"./styles/edit.css\";\n\nexport default function EditPage() {\n  const meta = useMeta();\n  const [message, setMessage] = React.useState(\"\");\n\n  function onSubmit(e) {\n    const { target } = e;\n    e.preventDefault();\n\n    const newData = {\n      customName: target.customName.value,\n      location: target.location.value,\n      imgUrl: target.imgUrl.value,\n      t1Color: target.t1Color.value,\n      t1Background: target.t1Background.value,\n      t2Color: target.t2Color.value,\n      t2Background: target.t2Background.value,\n      password: target.password.value\n    };\n\n    fetch(metadataUrl, {\n      method: \"PATCH\",\n      body: JSON.stringify(newData),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(response => {\n        if (response.status === 200) {\n          setMessage(\"success\");\n        } else {\n          throw new Error(response.statusText);\n        }\n      })\n      .catch(err => setMessage(err.message));\n  }\n  return (\n    <div id=\"edit\">\n      <form onSubmit={onSubmit}>\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <label htmlFor=\"customName\">Track Name: </label>\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"customName\"\n                  defaultValue={meta.customName}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"location\">Location: </label>\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"location\"\n                  defaultValue={meta.location}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"imgUrl\">Image URL: </label>\n              </td>\n              <td>\n                <input type=\"text\" name=\"imgUrl\" defaultValue={meta.imgUrl} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"t1Color\">T1 Color: </label>\n                <div\n                  className=\"block\"\n                  style={{ backgroundColor: meta.t1Color }}\n                ></div>\n              </td>\n              <td>\n                <input type=\"text\" name=\"t1Color\" defaultValue={meta.t1Color} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"t2Color\">T2 Color: </label>\n                <div\n                  className=\"block\"\n                  style={{ backgroundColor: meta.t2Color }}\n                ></div>\n              </td>\n              <td>\n                <input type=\"text\" name=\"t2Color\" defaultValue={meta.t2Color} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"t1Background\">T1 Background: </label>\n                <div\n                  className=\"block\"\n                  style={{ backgroundColor: meta.t1Background }}\n                ></div>\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"t1Background\"\n                  defaultValue={meta.t1Background}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"t2Background\">T2 Background: </label>\n                <div\n                  className=\"block\"\n                  style={{ backgroundColor: meta.t2Background }}\n                ></div>\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"t2Background\"\n                  defaultValue={meta.t2Background}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <label htmlFor=\"password\">Password: </label>\n              </td>\n              <td>\n                <input type=\"password\" name=\"password\" defaultValue={\"\"} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <input type=\"submit\" value=\"Update\" />\n              </td>\n              <td>{message}</td>\n            </tr>\n          </tbody>\n        </table>\n        <br />\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Edit from \"../components/Edit\";\n\nconst style= {\n  display: 'block',\n  textAlign: 'center'\n}\n\nexport default function EditPage() {\n  return (\n    <div style={style}>\n      <Edit />\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport * as config from \"../config\";\n\nconst audio = new Audio(config.streamUrl);\n\nexport default function usePlayer() {\n  const [firstTime, setFirstTime] = React.useState(true);\n  const [state, setState] = React.useState(false)\n  const pause = () => audio.pause();\n  const toggle = () => {\n    audio.paused ? play() : pause()\n    setState(!state) // to update view\n  }\n  const play = React.useCallback(() => {\n    if (!audio.paused) {\n      return;\n    }\n    window.focus();\n    audio.play().catch(() => {});\n  }, []);\n\n\n  React.useEffect(() => {\n    window.addEventListener(\"online\", play);\n    return () => window.removeEventListener(\"online\", play);\n  });\n\n  React.useEffect(() => {\n    if (firstTime) {\n      play();\n      setFirstTime(false);\n    }\n  }, [firstTime, play]);\n\n  return [!audio.paused, toggle];\n}\n","import React from \"react\";\n\nimport usePlayer from \"../hooks/usePlayer\";\nimport useMeta from \"../hooks/useMeta\";\n\nimport \"./styles/player.css\";\n\nexport default function Player(props) {\n  const [isPlaying, toggle] = usePlayer();\n  const meta = useMeta();\n\n  const state = isPlaying ? \"pause\" : \"play\";\n  const actionIcon = `/images/${meta.theme}/${state}.png`;\n\n  const t1 = meta ? meta.customName || meta.trackName : \"\";\n  const t2 = meta ? meta.location : \"\";\n\n  const t1Color = meta.t1Color || \"\";\n  const t1Background = meta.t1Background || \"\";\n  const t2Color = meta.t2Color || \"\";\n  const t2Background = meta.t2Background || \"\";\n\n  return (\n    <div id=\"player\">\n      <div>\n        <img\n          id=\"action-img\"\n          alt={\"Action Icon\"}\n          src={actionIcon}\n          onClick={toggle}\n        />\n      </div>\n      <div id=\"player-meta\">\n        <div\n          className=\"t t1\"\n          style={{ color: t1Color, backgroundColor: t1Background }}\n        >\n          <div className=\"m m1\">{t1}</div>\n        </div>\n        <div\n          className=\"t t2\"\n          style={{ color: t2Color, backgroundColor: t2Background }}\n        >\n          <div>{t2}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Player from \"../components/Player\";\n\nconst style = {\n  display: \"block\",\n  textAlign: \"center\"\n};\n\nexport default function PlayerPage() {\n  return (\n    <div style={style}>\n      <Player />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, BrowserRouter, Route } from \"react-router-dom\";\n\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\n\nimport EditPage from \"./pages/EditPage\";\nimport PlayerPage from \"./pages/PlayerPage\";\n\nimport useMeta from \"./hooks/useMeta\";\n\nimport { defaultTheme } from \"./config\";\n\nfunction App() {\n  const [art, setArt] = React.useState(null);\n  const meta = useMeta();\n  const body = document.getElementsByTagName(\"body\")[0];\n\n  function updateBackground(imgUrl) {\n    const newUrl = `url(\"${imgUrl}\")`;\n    if (body.style.backgroundImage !== newUrl) {\n      body.style.backgroundImage = newUrl;\n    } else if (!imgUrl) {\n      body.style.backgroundImage = null;\n    }\n  }\n\n  if (meta.imgUrl !== art) {\n    setArt(meta.imgUrl);\n    updateBackground(meta.imgUrl);\n  }\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className={meta.theme || defaultTheme}>\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={PlayerPage} />\n          <Route exact path=\"/edit\" component={EditPage} />\n        </Switch>\n        <Footer />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}